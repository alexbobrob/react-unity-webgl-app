import IUnityConfig from "./interfaces/IUnityConfig";
import { UnityVersion } from "./enums/UnityVersion";
import UnityComponent from "./components/Unity";

export default class UnityContent {
  /**
   * the relative path to the build json file generated by Unity.
   * @type {string}
   * @private
   */
  private buildJsonPath: string;

  /**
   * the relative path to the unity loader javascript file.
   * @type {string}
   * @private
   */
  private unityLoaderJsPath: string;

  /**
   * The Unity component binded to this content.
   */
  private unityComponentInstance?: UnityComponent;

  /**
   * The Unity component binded to this content.
   */
  private unityPlayerInstance?: any;

  /**
   * the Unity configuration that will be used to start the player.
   * @type {IUnityConfig}
   * @public
   */
  public unityConfig: IUnityConfig;

  /**
   * Creates a new Unity content object. This object can be used
   * @param {string} buildJsonPath the relative path to the build json file generated by Unity.
   * @param {string} unityLoaderJsPath the relative path to the unity loader javascript file.
   * @param {IUnityConfig} unityConfig the Unity configuration that will be used to start the player.
   */
  constructor(
    buildJsonPath: string,
    unityLoaderJsPath: string,
    unityConfig?: IUnityConfig
  ) {
    this.buildJsonPath = buildJsonPath;
    this.unityLoaderJsPath = unityLoaderJsPath;
    const _unityConfig =
      typeof unityConfig === "undefined" ? ({} as IUnityConfig) : unityConfig;
    this.unityConfig = {
      isFullscreen: _unityConfig.isFullscreen || false,
      modules: _unityConfig.modules || {},
      unityVersion: UnityVersion.UNITY_2018,
      id: "nill"
    } as IUnityConfig;
  }

  /**
   * Binds a unity component to this content.
   * @param unityComponentInstance the unity component that will be binded to this content.
   */
  public setComponentInstance(unityComponentInstance: UnityComponent): void {
    this.unityComponentInstance = unityComponentInstance;
  }

  /**
   * Binds a unity player to this content.
   * @param unityPlayerInstance the unity component that will be binded to this content.
   */
  public setUnityPlayerInstance(unityPlayerInstance: any): void {
    this.unityPlayerInstance = unityPlayerInstance;
  }

  /**
   * Sends an event to the Unity player that will trigger a function.
   * @param {string} gameObjectName the name of the game object in your Unity scene.
   * @param {string} methodName the name of the public method on the game object.
   * @param {any} parameter an optional parameter to pass along to the method.
   */
  public send(
    gameObjectName: string,
    methodName: string,
    parameter?: any
  ): void {
    console.log(`Sending ${gameObjectName} ${methodName} ${parameter}`);
    // this.unityPlayerInstance.sendMessage(gameObjectName, methodName); // TODO
  }
}
